package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt events.go and event/events.go and run go generate

import (
	"github.com/andersfylling/disgord/internal/event"
)

// helpers

func AllEvents() []string {
    return AllEventsExcept()
}

func AllEventsExcept(except ...string) []string {
    evtsMap := map[string]int8{
    {{- range .}}
        {{- if .IsDiscordEvent }}
            Evt{{.}}: 0,
        {{- end}}
    {{- end}}
    }

    for i := range except {
        delete(evtsMap, except[i])
    }

    evts := make([]string, 0, len(evtsMap))
    for k := range evtsMap {
        evts = append(evts, k)
    }
    return evts
}

// ---------------------------

{{range .}}
{{if .IsDiscordEvent}}
{{.RenderDocs}}
const Evt{{.}} = event.{{.}}

func (h *{{.}}) setShardID(id uint) { h.ShardID = id }

type handler{{.}} = func(Session, *{{.}})

// --------------------------- {{end}}{{end}}

type dispatchRegistrater interface {
    register(evt string, inputs ...interface{}) error
}

type socketHandlerRegister struct {
    evtName string
    middlewares []Middleware
    handlers []Handler
    ctrl HandlerCtrl

    reactor dispatchRegistrater
}

func (shr *socketHandlerRegister) build() {
    inputs := make([]interface{}, 0, len(shr.middlewares) + len(shr.handlers) + 1)
    for _, mdlw := range shr.middlewares {
        inputs = append(inputs, mdlw)
    }
    for _, handler := range shr.handlers {
        inputs = append(inputs, handler)
    }
    if shr.ctrl != nil {
        inputs = append(inputs, shr.ctrl)
    }

    if err := shr.reactor.register(shr.evtName, inputs...); err != nil {
        panic(err)
    }
}

func (shr socketHandlerRegister) WithCtrl(ctrl HandlerCtrl) SocketHandlerRegistrator {
    if shr.ctrl != nil {
        panic("a controller was already registered for this handler specification")
    }
    shr.ctrl = ctrl
    return shr
}

func (shr socketHandlerRegister) WithMiddleware(first Middleware, extra ...Middleware) SocketHandlerRegistrator {
    shr.middlewares = append(shr.middlewares, first)
    shr.middlewares = append(shr.middlewares, extra...)
    return shr
}

{{range .}}
{{- if .IsDiscordEvent}}
{{.RenderDocs}}
func (shr socketHandlerRegister) {{.}}(handler handler{{.}}, moreHandlers ...handler{{.}}) {
    shr.evtName = Evt{{.}}
    shr.handlers = append(shr.handlers, handler)
    for _, h := range moreHandlers {
        shr.handlers = append(shr.handlers, h)
    }
    shr.build()
}

func (shr socketHandlerRegister) {{.}}Chan(handler chan *{{.}}, moreHandlers ...chan *{{.}}) {
    shr.evtName = Evt{{.}}
    shr.handlers = append(shr.handlers, handler)
    for _, h := range moreHandlers {
        shr.handlers = append(shr.handlers, h)
    }
    shr.build()
}
{{- end}}
{{- end}}

type SocketHandlerRegistrator interface {
{{range .}}
{{- if .IsDiscordEvent}}
    {{.}}(handler handler{{.}}, moreHandlers ...handler{{.}})
    {{.}}Chan(handler chan *{{.}}, moreHandlers ... chan *{{.}})
{{- end}}
{{- end}}
    WithCtrl(HandlerCtrl) SocketHandlerRegistrator
    WithMiddleware(first Middleware, extra ...Middleware) SocketHandlerRegistrator
}
