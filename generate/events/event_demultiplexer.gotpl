package disgord

// Warning: This file has been automatically generated by generate/events/main.go
// Do NOT make changes here, instead adapt events.go and event/events.go and run go generate

import (
	"context"
	"errors"
	"fmt"
	"sync"
)

// HandlerCtrl used when inserting a handler to dictate whether or not the handler(s) should
// still be kept in the handlers list..
type HandlerCtrl interface {
	OnInsert(Session) error
	OnRemove(Session) error

	// IsDead does not need to be locked as the demultiplexer access it synchronously.
	IsDead() bool

	// Update For every time Update is called, it's internal trackers must be updated.
	// you should assume that .Update() means the handler was used.
	Update()
}

type simpleHandlerCtrl struct {
    remaining int
}
func (ctrl *simpleHandlerCtrl) IsDead() bool {
    return ctrl.remaining == 0
}
func (ctrl *simpleHandlerCtrl) OnInsert(s Session) error { return nil }
func (ctrl *simpleHandlerCtrl) OnRemove(s Session) error { return nil }
func (ctrl *simpleHandlerCtrl) Update() {
    ctrl.remaining--
}
var _ HandlerCtrl = (*simpleHandlerCtrl)(nil)

type Handler = interface{}
type Middleware = func(interface{}) interface{}

// handlerSpec (handler specification) holds the details for executing the handler
type handlerSpec struct {
    sync.RWMutex
	middlewares []Middleware
	handlers    []Handler
    ctrl        HandlerCtrl
}

func (hs *handlerSpec) next() bool {
    hs.Lock()
    defer hs.Unlock()

    if hs.ctrl.IsDead() {
        return false
    }

    hs.ctrl.Update()
    return true
}

func (hs *handlerSpec) populate(inputs ...interface{}) (err error) {
	var i int

	// middlewares
	for ; i < len(inputs); i++ {
		if mdlw, ok := inputs[i].(Middleware); ok {
			hs.middlewares = append(hs.middlewares, mdlw)
		} else {
			break
		}
	}

	// handlers
	for ; i < len(inputs) - 1; i++ {
		if handler, ok := inputs[i].(Handler); ok {
			hs.handlers = append(hs.handlers, handler)
		} else {
			break
		}
	}

	// check if last arg is a controller
	if i < len(inputs) {
		if ctrl, ok := inputs[i].(HandlerCtrl); ok {
			hs.ctrl = ctrl
			i++
		} else if handler, ok := inputs[i].(Handler); ok {
			hs.handlers = append(hs.handlers, handler)
			hs.ctrl = &simpleHandlerCtrl{
				remaining: -1,
			}
			i++
		}
	}

	if len(inputs) != i {
	    format := "unable to add all handlers/middlewares (%d/%d). Are they in correct order? middlewares, then handlers"
	    err = errors.New(fmt.Sprintf(format, i, len(inputs)))
	}

	return err
}

func (hs *handlerSpec) runMdlws(evt interface{}) interface{} {
	for i := range hs.middlewares {
		evt = hs.middlewares[i](evt) // note how the evt pointer is overwritten
		if evt == nil {
			break
		}
	}

	return evt
}

func (hs *handlerSpec) dispatch(evtName string, session Session, evt interface{}) {
	// ordering is important
	switch evtName {
    {{range .}} {{if .IsDiscordEvent}}
	case Event{{.}}:
		for _, handler := range hs.handlers {
		    if cb, ok := handler.({{.}}Handler); ok {
		        cb(session, evt.(*{{.}}))
		    } else if cb, ok := handler.(SimpleHandler); ok {
		        cb(session)
		    } else if cb, ok := handler.(SimplestHandler); ok {
		        cb()
		    } else {
		        fmt.Println("ERROR! Incorrect handler type given for event: {{.}}")
		    }
		} {{end}} {{end}}
	}
}

// NewDispatch construct a Dispatch object for reacting to web socket events
// from discord
func newEvtDemultiplexer(activateEventChannels bool, evtChanSize int) *evtDemultiplexer {
	dem := &evtDemultiplexer{
		activateEventChannels: activateEventChannels,
		handlers: make(map[string][]*handlerSpec),
		shutdown: make(chan struct{}),
	}

	if activateEventChannels {
        {{range .}} {{if .IsDiscordEvent}}
        dem.{{.LowerCaseFirst}}Chan = make(chan *{{.}}, evtChanSize) {{end}} {{end}}
    }

	return dem
}

// evtDemultiplexer holds all the channels and internal state for all registered
// observers
type evtDemultiplexer struct {
	sync.RWMutex

	{{range .}} {{if .IsDiscordEvent}}
	{{.LowerCaseFirst}}Chan chan *{{.}} {{end}} {{end}}

	activateEventChannels bool

	handlers map[string][]*handlerSpec

	shutdown chan struct{}
}

func (d *evtDemultiplexer) nrOfAliveHandlers() (counter int) {
    for k := range d.handlers {
        for i := range d.handlers[k] {
            if d.handlers[k][i].ctrl.IsDead() == false {
                counter++
            }
        }
    }

    return
}

// EventChan ... TODO
func (d *evtDemultiplexer) EventChan(evt string) (channel interface{}, err error) {
	if !d.activateEventChannels {
	    return nil, errors.New("usage of event channels have not been activated. See disgord.Config")
	}

	switch evt {
	{{range .}} {{if .IsDiscordEvent}}
	case Event{{.}}:
			channel = d.{{.}}() {{end}} {{end}}
	default:
		err = errors.New("no event channel exists for given event: " + evt)
	}

	return
}

func (d *evtDemultiplexer) triggerChan(ctx context.Context, evtName string, session Session, box interface{}) {
	if !d.activateEventChannels {
	    return
	}

	switch evtName {
	{{range .}} {{if .IsDiscordEvent}}
	case Event{{.}}:
		d.{{.LowerCaseFirst}}Chan <- box.(*{{.}}) {{end}} {{end}}
	default:
		// if we land at this stage, the channel is either full or a unknown event has come through
		// empty the channel
		d.emptyChannel(evtName)
	}
}

func (d *evtDemultiplexer) emptyChannel(evtName string) {
	if !d.activateEventChannels {
	    return
	}

    switch evtName {
        {{range .}} {{if .IsDiscordEvent}}
        case Event{{.}}:
            for range d.{{.LowerCaseFirst}}Chan {} {{end}} {{end}}
    }
}

func (d *evtDemultiplexer) triggerHandlers(ctx context.Context, evtName string, session Session, box interface{}) {
    d.RLock()
	handlers := d.handlers[evtName]
    d.RUnlock()

	for i := range handlers {
	    // TODO: remove dead handlers
	    if alive := handlers[i].next(); !alive {
	        continue
	    }

	    localEvt := handlers[i].runMdlws(box)
	    if localEvt == nil {
	        continue
	    }

	    handlers[i].dispatch(evtName, session, localEvt)
	}
}

{{range .}} {{if .IsDiscordEvent}}
// {{.}} gives access to {{.LowerCaseFirst}}Chan for {{.}} events
func (d *evtDemultiplexer) {{.}}() <-chan *{{.}} {
	return d.{{.LowerCaseFirst}}Chan
} {{end}} {{end}}
