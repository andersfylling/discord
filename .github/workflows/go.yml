name: Go
on: [push]
jobs:

  unit-tests:
    name: Runs unit tests
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Run tests
      run: go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...

  formatting:
    name: Code is formatted
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Correctly formatted files
      run: test -z $(go fmt ./...)

  generate:
    name: go generate yields no new content
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        GOPATH=$HOME/go
        go get -v -t -d ./...
      
    - name: install stringer
      run: |
        go get -u golang.org/x/tools/cmd/stringer
        PATH="${PATH}:$GOPATH/bin"
        echo $GOPATH
      
    - name: create sha1 sum of current files
      run: OLD=$(find . -type f -name "*.go" -print0 | sort -z | xargs -0 sha1sum | sha1sum)

    - name: go generate
      run: go generate
      
    - name: check if sha1 sum has changed
      run: |
        NEW=$(find . -type f -name "*.go" -print0 | sort -z | xargs -0 sha1sum | sha1sum)
        test ${OLD} = ${NEW}
        

  test-coverage:
    name: Upload code coverage
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: go get -v -t -d ./...
      
    - name: Setup code climate test-reporter
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter before-build

    - name: Upload test coverage
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        for pkg in $(go list ./...); do
            go test -coverprofile=$(echo $pkg | tr / -).cover $pkg
        done
        echo "mode: set" > c.out
        grep -h -v "^mode:" ./*.cover >> c.out
        rm -f *.cover
        ./cc-test-reporter after-build --debug --exit-code $? --prefix github.com/andersfylling/disgord/
      
