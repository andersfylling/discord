package disgord

// Warning: This file has been automatically generated by generate/events/main.go
// Do NOT make changes here, instead adapt events.go and event/events.go and run go generate

import (
	"context"

	"github.com/andersfylling/disgord/event"
)

// these "simple" handler can be used, if you don't care about the actual event data
type SimplestHandler = func()
type SimpleHandler = func(session Session)

// ---------------------------

// EventChannelCreate Sent when a new channel is created, relevant to the current user. The inner payload is a DM channel or
// guild channel object.
//
const EventChannelCreate = event.ChannelCreate

func (h *ChannelCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelCreateHandler is triggered in ChannelCreate events
type ChannelCreateHandler = func(session Session, h *ChannelCreate)

// ---------------------------

// EventChannelDelete Sent when a channel relevant to the current user is deleted. The inner payload is a DM or Guild channel object.
//
const EventChannelDelete = event.ChannelDelete

func (h *ChannelDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelDeleteHandler is triggered in ChannelDelete events
type ChannelDeleteHandler = func(session Session, h *ChannelDelete)

// ---------------------------

// EventChannelPinsUpdate Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.
//  Fields:
//  - ChannelID int64 or Snowflake
//  - LastPinTimestamp time.Now().UTC().Format(time.RFC3339)
// TODO fix.
//
const EventChannelPinsUpdate = event.ChannelPinsUpdate

func (h *ChannelPinsUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelPinsUpdateHandler is triggered in ChannelPinsUpdate events
type ChannelPinsUpdateHandler = func(session Session, h *ChannelPinsUpdate)

// ---------------------------

// EventChannelUpdate Sent when a channel is updated. The inner payload is a guild channel object.
//
const EventChannelUpdate = event.ChannelUpdate

func (h *ChannelUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelUpdateHandler is triggered in ChannelUpdate events
type ChannelUpdateHandler = func(session Session, h *ChannelUpdate)

// ---------------------------

// EventGuildBanAdd Sent when a user is banned from a guild. The inner payload is a user object, with an extra guild_id key.
//
const EventGuildBanAdd = event.GuildBanAdd

func (h *GuildBanAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildBanAddHandler is triggered in GuildBanAdd events
type GuildBanAddHandler = func(session Session, h *GuildBanAdd)

// ---------------------------

// EventGuildBanRemove Sent when a user is unbanned from a guild. The inner payload is a user object, with an extra guild_id key.
//
const EventGuildBanRemove = event.GuildBanRemove

func (h *GuildBanRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildBanRemoveHandler is triggered in GuildBanRemove events
type GuildBanRemoveHandler = func(session Session, h *GuildBanRemove)

// ---------------------------

// EventGuildCreate This event can be sent in three different scenarios:
//  1. When a user is initially connecting, to lazily load and backfill information for all unavailable guilds
//     sent in the Ready event.
// 	2. When a Guild becomes available again to the client.
// 	3. When the current user joins a new Guild.
//
const EventGuildCreate = event.GuildCreate

func (h *GuildCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildCreateHandler is triggered in GuildCreate events
type GuildCreateHandler = func(session Session, h *GuildCreate)

// ---------------------------

// EventGuildDelete Sent when a guild becomes unavailable during a guild outage, or when the user leaves or is removed from a guild.
// The inner payload is an unavailable guild object. If the unavailable field is not set, the user was removed
// from the guild.
//
const EventGuildDelete = event.GuildDelete

func (h *GuildDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildDeleteHandler is triggered in GuildDelete events
type GuildDeleteHandler = func(session Session, h *GuildDelete)

// ---------------------------

// EventGuildEmojisUpdate Sent when a guild's emojis have been updated.
//  Fields:
//  - GuildID Snowflake
//  - Emojis []*Emoji
//
const EventGuildEmojisUpdate = event.GuildEmojisUpdate

func (h *GuildEmojisUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildEmojisUpdateHandler is triggered in GuildEmojisUpdate events
type GuildEmojisUpdateHandler = func(session Session, h *GuildEmojisUpdate)

// ---------------------------

// EventGuildIntegrationsUpdate Sent when a guild integration is updated.
//  Fields:
//  - GuildID Snowflake
//
const EventGuildIntegrationsUpdate = event.GuildIntegrationsUpdate

func (h *GuildIntegrationsUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildIntegrationsUpdateHandler is triggered in GuildIntegrationsUpdate events
type GuildIntegrationsUpdateHandler = func(session Session, h *GuildIntegrationsUpdate)

// ---------------------------

// EventGuildMemberAdd Sent when a new user joins a guild. The inner payload is a guild member object with these extra fields:
//  - GuildID Snowflake
//
//  Fields:
//  - Member *Member
//
const EventGuildMemberAdd = event.GuildMemberAdd

func (h *GuildMemberAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberAddHandler is triggered in GuildMemberAdd events
type GuildMemberAddHandler = func(session Session, h *GuildMemberAdd)

// ---------------------------

// EventGuildMemberRemove Sent when a user is removed from a guild (leave/kick/ban).
//  Fields:
//  - GuildID   Snowflake
//  - User      *User
//
const EventGuildMemberRemove = event.GuildMemberRemove

func (h *GuildMemberRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberRemoveHandler is triggered in GuildMemberRemove events
type GuildMemberRemoveHandler = func(session Session, h *GuildMemberRemove)

// ---------------------------

// EventGuildMemberUpdate Sent when a guild member is updated.
//  Fields:
//  - GuildID   Snowflake
//  - Roles     []Snowflake
//  - User      *User
//  - Nick      string
//
const EventGuildMemberUpdate = event.GuildMemberUpdate

func (h *GuildMemberUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberUpdateHandler is triggered in GuildMemberUpdate events
type GuildMemberUpdateHandler = func(session Session, h *GuildMemberUpdate)

// ---------------------------

// EventGuildMembersChunk Sent in response to Gateway Request Guild Members.
//  Fields:
//  - GuildID Snowflake
//  - Members []*Member
//
const EventGuildMembersChunk = event.GuildMembersChunk

func (h *GuildMembersChunk) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMembersChunkHandler is triggered in GuildMembersChunk events
type GuildMembersChunkHandler = func(session Session, h *GuildMembersChunk)

// ---------------------------

// EventGuildRoleCreate Sent when a guild role is created.
//  Fields:
//  - GuildID   Snowflake
//  - Role      *Role
//
const EventGuildRoleCreate = event.GuildRoleCreate

func (h *GuildRoleCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleCreateHandler is triggered in GuildRoleCreate events
type GuildRoleCreateHandler = func(session Session, h *GuildRoleCreate)

// ---------------------------

// EventGuildRoleDelete Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - RoleID  Snowflake
//
const EventGuildRoleDelete = event.GuildRoleDelete

func (h *GuildRoleDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleDeleteHandler is triggered in GuildRoleDelete events
type GuildRoleDeleteHandler = func(session Session, h *GuildRoleDelete)

// ---------------------------

// EventGuildRoleUpdate Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - Role    *Role
//
const EventGuildRoleUpdate = event.GuildRoleUpdate

func (h *GuildRoleUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleUpdateHandler is triggered in GuildRoleUpdate events
type GuildRoleUpdateHandler = func(session Session, h *GuildRoleUpdate)

// ---------------------------

// EventGuildUpdate Sent when a guild is updated. The inner payload is a guild object.
//
const EventGuildUpdate = event.GuildUpdate

func (h *GuildUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildUpdateHandler is triggered in GuildUpdate events
type GuildUpdateHandler = func(session Session, h *GuildUpdate)

// ---------------------------

// EventMessageCreate Sent when a message is created. The inner payload is a message object.
//
const EventMessageCreate = event.MessageCreate

func (h *MessageCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageCreateHandler is triggered in MessageCreate events
type MessageCreateHandler = func(session Session, h *MessageCreate)

// ---------------------------

// EventMessageDelete Sent when a message is deleted.
//  Fields:
//  - ID        Snowflake
//  - ChannelID Snowflake
//
const EventMessageDelete = event.MessageDelete

func (h *MessageDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageDeleteHandler is triggered in MessageDelete events
type MessageDeleteHandler = func(session Session, h *MessageDelete)

// ---------------------------

// EventMessageDeleteBulk Sent when multiple messages are deleted at once.
//  Fields:
//  - IDs       []Snowflake
//  - ChannelID Snowflake
//
const EventMessageDeleteBulk = event.MessageDeleteBulk

func (h *MessageDeleteBulk) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageDeleteBulkHandler is triggered in MessageDeleteBulk events
type MessageDeleteBulkHandler = func(session Session, h *MessageDeleteBulk)

// ---------------------------

// EventMessageReactionAdd Sent when a user adds a reaction to a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
const EventMessageReactionAdd = event.MessageReactionAdd

func (h *MessageReactionAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionAddHandler is triggered in MessageReactionAdd events
type MessageReactionAddHandler = func(session Session, h *MessageReactionAdd)

// ---------------------------

// EventMessageReactionRemove Sent when a user removes a reaction from a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
const EventMessageReactionRemove = event.MessageReactionRemove

func (h *MessageReactionRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionRemoveHandler is triggered in MessageReactionRemove events
type MessageReactionRemoveHandler = func(session Session, h *MessageReactionRemove)

// ---------------------------

// EventMessageReactionRemoveAll Sent when a user explicitly removes all reactions from a message.
//  Fields:
//  - ChannelID Snowflake
//  - MessageID Snowflake
//
const EventMessageReactionRemoveAll = event.MessageReactionRemoveAll

func (h *MessageReactionRemoveAll) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionRemoveAllHandler is triggered in MessageReactionRemoveAll events
type MessageReactionRemoveAllHandler = func(session Session, h *MessageReactionRemoveAll)

// ---------------------------

// EventMessageUpdate Sent when a message is updated. The inner payload is a message object.
//
// NOTE! Has _at_least_ the GuildID and ChannelID fields.
//
const EventMessageUpdate = event.MessageUpdate

func (h *MessageUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageUpdateHandler is triggered in MessageUpdate events
type MessageUpdateHandler = func(session Session, h *MessageUpdate)

// ---------------------------

// EventPresenceUpdate A user's presence is their current state on a guild. This event is sent when a user's presence is updated for a guild.
//  Fields:
//  - User    *User
//  - Roles   []Snowflake
//  - Game    *Activity
//  - GuildID Snowflake
//  - Status  string
//
const EventPresenceUpdate = event.PresenceUpdate

func (h *PresenceUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// PresenceUpdateHandler is triggered in PresenceUpdate events
type PresenceUpdateHandler = func(session Session, h *PresenceUpdate)

// ---------------------------

// EventPresencesReplace Holds and array of presence update objects
//
const EventPresencesReplace = event.PresencesReplace

func (h *PresencesReplace) registerContext(ctx context.Context) { h.Ctx = ctx }

// PresencesReplaceHandler is triggered in PresencesReplace events
type PresencesReplaceHandler = func(session Session, h *PresencesReplace)

// ---------------------------

// EventReady The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions).
// // The ready event can be the largest and most complex event the gateway will send, as it contains all the state
// // required for a client to begin interacting with the rest of the platform.
// //  Fields:
// //  - V int
// //  - User *User
// //  - PrivateChannels []*Channel
// //  - Guilds []*GuildUnavailable
// //  - SessionID string
// //  - Trace []string
//
const EventReady = event.Ready

func (h *Ready) registerContext(ctx context.Context) { h.Ctx = ctx }

// ReadyHandler is triggered in Ready events
type ReadyHandler = func(session Session, h *Ready)

// ---------------------------

// EventResumed The resumed event is dispatched when a client has sent a resume payload to the gateway
// (for resuming existing sessions).
//  Fields:
//  - Trace []string
//
const EventResumed = event.Resumed

func (h *Resumed) registerContext(ctx context.Context) { h.Ctx = ctx }

// ResumedHandler is triggered in Resumed events
type ResumedHandler = func(session Session, h *Resumed)

// ---------------------------

// EventTypingStart Sent when a user starts typing in a channel.
//  Fields:
//  - ChannelID     Snowflake
//  - UserID        Snowflake
//  - TimestampUnix int
//
const EventTypingStart = event.TypingStart

func (h *TypingStart) registerContext(ctx context.Context) { h.Ctx = ctx }

// TypingStartHandler is triggered in TypingStart events
type TypingStartHandler = func(session Session, h *TypingStart)

// ---------------------------

// EventUserUpdate Sent when properties about the user change. Inner payload is a user object.
//
const EventUserUpdate = event.UserUpdate

func (h *UserUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// UserUpdateHandler is triggered in UserUpdate events
type UserUpdateHandler = func(session Session, h *UserUpdate)

// ---------------------------

// EventVoiceServerUpdate Sent when a guild's voice server is updated. This is sent when initially connecting to voice, and when the current
// voice instance fails over to a new server.
//  Fields:
//  - Token     string
//  - ChannelID Snowflake
//  - Endpoint  string
//
const EventVoiceServerUpdate = event.VoiceServerUpdate

func (h *VoiceServerUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// VoiceServerUpdateHandler is triggered in VoiceServerUpdate events
type VoiceServerUpdateHandler = func(session Session, h *VoiceServerUpdate)

// ---------------------------

// EventVoiceStateUpdate Sent when someone joins/leaves/moves voice channels. Inner payload is a voice state object.
//
const EventVoiceStateUpdate = event.VoiceStateUpdate

func (h *VoiceStateUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// VoiceStateUpdateHandler is triggered in VoiceStateUpdate events
type VoiceStateUpdateHandler = func(session Session, h *VoiceStateUpdate)

// ---------------------------

// EventWebhooksUpdate Sent when a guild channel's webhook is created, updated, or deleted.
//  Fields:
//  - GuildID   Snowflake
//  - ChannelID Snowflake
//
const EventWebhooksUpdate = event.WebhooksUpdate

func (h *WebhooksUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// WebhooksUpdateHandler is triggered in WebhooksUpdate events
type WebhooksUpdateHandler = func(session Session, h *WebhooksUpdate)

// ---------------------------
