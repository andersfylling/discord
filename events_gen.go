package disgord

// Warning: This file has been automatically generated by generate/events/main.go
// Do NOT make changes here, instead adapt events.go and event/events.go and run go generate

import (
	"context"

	"github.com/andersfylling/disgord/event"
)

// Sent when a new channel is created, relevant to the current user. The inner payload is a DM channel or
// guild channel object.
//
const EventChannelCreate = event.ChannelCreate

func (h *ChannelCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelCreateCallback is triggered in ChannelCreate events
type ChannelCreateCallback = func(session Session, h *ChannelCreate)

// ---------------------------

// Sent when a channel relevant to the current user is deleted. The inner payload is a DM or Guild channel object.
//
const EventChannelDelete = event.ChannelDelete

func (h *ChannelDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelDeleteCallback is triggered in ChannelDelete events
type ChannelDeleteCallback = func(session Session, h *ChannelDelete)

// ---------------------------

// Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.
//  Fields:
//  - ChannelID int64 or Snowflake
//  - LastPinTimestamp time.Now().UTC().Format(time.RFC3339)
// TODO fix.
//
const EventChannelPinsUpdate = event.ChannelPinsUpdate

func (h *ChannelPinsUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelPinsUpdateCallback is triggered in ChannelPinsUpdate events
type ChannelPinsUpdateCallback = func(session Session, h *ChannelPinsUpdate)

// ---------------------------

// Sent when a channel is updated. The inner payload is a guild channel object.
//
const EventChannelUpdate = event.ChannelUpdate

func (h *ChannelUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// ChannelUpdateCallback is triggered in ChannelUpdate events
type ChannelUpdateCallback = func(session Session, h *ChannelUpdate)

// ---------------------------

// Sent when a user is banned from a guild. The inner payload is a user object, with an extra guild_id key.
//
const EventGuildBanAdd = event.GuildBanAdd

func (h *GuildBanAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildBanAddCallback is triggered in GuildBanAdd events
type GuildBanAddCallback = func(session Session, h *GuildBanAdd)

// ---------------------------

// Sent when a user is unbanned from a guild. The inner payload is a user object, with an extra guild_id key.
//
const EventGuildBanRemove = event.GuildBanRemove

func (h *GuildBanRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildBanRemoveCallback is triggered in GuildBanRemove events
type GuildBanRemoveCallback = func(session Session, h *GuildBanRemove)

// ---------------------------

// This event can be sent in three different scenarios:
//  1. When a user is initially connecting, to lazily load and backfill information for all unavailable guilds
//     sent in the Ready event.
// 	2. When a Guild becomes available again to the client.
// 	3. When the current user joins a new Guild.
//
const EventGuildCreate = event.GuildCreate

func (h *GuildCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildCreateCallback is triggered in GuildCreate events
type GuildCreateCallback = func(session Session, h *GuildCreate)

// ---------------------------

// Sent when a guild becomes unavailable during a guild outage, or when the user leaves or is removed from a guild.
// The inner payload is an unavailable guild object. If the unavailable field is not set, the user was removed
// from the guild.
//
const EventGuildDelete = event.GuildDelete

func (h *GuildDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildDeleteCallback is triggered in GuildDelete events
type GuildDeleteCallback = func(session Session, h *GuildDelete)

// ---------------------------

// Sent when a guild's emojis have been updated.
//  Fields:
//  - GuildID Snowflake
//  - Emojis []*Emoji
//
const EventGuildEmojisUpdate = event.GuildEmojisUpdate

func (h *GuildEmojisUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildEmojisUpdateCallback is triggered in GuildEmojisUpdate events
type GuildEmojisUpdateCallback = func(session Session, h *GuildEmojisUpdate)

// ---------------------------

// Sent when a guild integration is updated.
//  Fields:
//  - GuildID Snowflake
//
const EventGuildIntegrationsUpdate = event.GuildIntegrationsUpdate

func (h *GuildIntegrationsUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildIntegrationsUpdateCallback is triggered in GuildIntegrationsUpdate events
type GuildIntegrationsUpdateCallback = func(session Session, h *GuildIntegrationsUpdate)

// ---------------------------

// Sent when a new user joins a guild. The inner payload is a guild member object with these extra fields:
//  - GuildID Snowflake
//
//  Fields:
//  - Member *Member
//
const EventGuildMemberAdd = event.GuildMemberAdd

func (h *GuildMemberAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberAddCallback is triggered in GuildMemberAdd events
type GuildMemberAddCallback = func(session Session, h *GuildMemberAdd)

// ---------------------------

// Sent when a user is removed from a guild (leave/kick/ban).
//  Fields:
//  - GuildID   Snowflake
//  - User      *User
//
const EventGuildMemberRemove = event.GuildMemberRemove

func (h *GuildMemberRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberRemoveCallback is triggered in GuildMemberRemove events
type GuildMemberRemoveCallback = func(session Session, h *GuildMemberRemove)

// ---------------------------

// Sent when a guild member is updated.
//  Fields:
//  - GuildID   Snowflake
//  - Roles     []Snowflake
//  - User      *User
//  - Nick      string
//
const EventGuildMemberUpdate = event.GuildMemberUpdate

func (h *GuildMemberUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMemberUpdateCallback is triggered in GuildMemberUpdate events
type GuildMemberUpdateCallback = func(session Session, h *GuildMemberUpdate)

// ---------------------------

// Sent in response to Gateway Request Guild Members.
//  Fields:
//  - GuildID Snowflake
//  - Members []*Member
//
const EventGuildMembersChunk = event.GuildMembersChunk

func (h *GuildMembersChunk) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildMembersChunkCallback is triggered in GuildMembersChunk events
type GuildMembersChunkCallback = func(session Session, h *GuildMembersChunk)

// ---------------------------

// Sent when a guild role is created.
//  Fields:
//  - GuildID   Snowflake
//  - Role      *Role
//
const EventGuildRoleCreate = event.GuildRoleCreate

func (h *GuildRoleCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleCreateCallback is triggered in GuildRoleCreate events
type GuildRoleCreateCallback = func(session Session, h *GuildRoleCreate)

// ---------------------------

// Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - RoleID  Snowflake
//
const EventGuildRoleDelete = event.GuildRoleDelete

func (h *GuildRoleDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleDeleteCallback is triggered in GuildRoleDelete events
type GuildRoleDeleteCallback = func(session Session, h *GuildRoleDelete)

// ---------------------------

// Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - Role    *Role
//
const EventGuildRoleUpdate = event.GuildRoleUpdate

func (h *GuildRoleUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildRoleUpdateCallback is triggered in GuildRoleUpdate events
type GuildRoleUpdateCallback = func(session Session, h *GuildRoleUpdate)

// ---------------------------

// Sent when a guild is updated. The inner payload is a guild object.
//
const EventGuildUpdate = event.GuildUpdate

func (h *GuildUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// GuildUpdateCallback is triggered in GuildUpdate events
type GuildUpdateCallback = func(session Session, h *GuildUpdate)

// ---------------------------

// Sent when a message is created. The inner payload is a message object.
//
const EventMessageCreate = event.MessageCreate

func (h *MessageCreate) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageCreateCallback is triggered in MessageCreate events
type MessageCreateCallback = func(session Session, h *MessageCreate)

// ---------------------------

// Sent when a message is deleted.
//  Fields:
//  - ID        Snowflake
//  - ChannelID Snowflake
//
const EventMessageDelete = event.MessageDelete

func (h *MessageDelete) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageDeleteCallback is triggered in MessageDelete events
type MessageDeleteCallback = func(session Session, h *MessageDelete)

// ---------------------------

// Sent when multiple messages are deleted at once.
//  Fields:
//  - IDs       []Snowflake
//  - ChannelID Snowflake
//
const EventMessageDeleteBulk = event.MessageDeleteBulk

func (h *MessageDeleteBulk) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageDeleteBulkCallback is triggered in MessageDeleteBulk events
type MessageDeleteBulkCallback = func(session Session, h *MessageDeleteBulk)

// ---------------------------

// Sent when a user adds a reaction to a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
const EventMessageReactionAdd = event.MessageReactionAdd

func (h *MessageReactionAdd) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionAddCallback is triggered in MessageReactionAdd events
type MessageReactionAddCallback = func(session Session, h *MessageReactionAdd)

// ---------------------------

// Sent when a user removes a reaction from a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
const EventMessageReactionRemove = event.MessageReactionRemove

func (h *MessageReactionRemove) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionRemoveCallback is triggered in MessageReactionRemove events
type MessageReactionRemoveCallback = func(session Session, h *MessageReactionRemove)

// ---------------------------

// Sent when a user explicitly removes all reactions from a message.
//  Fields:
//  - ChannelID Snowflake
//  - MessageID Snowflake
//
const EventMessageReactionRemoveAll = event.MessageReactionRemoveAll

func (h *MessageReactionRemoveAll) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageReactionRemoveAllCallback is triggered in MessageReactionRemoveAll events
type MessageReactionRemoveAllCallback = func(session Session, h *MessageReactionRemoveAll)

// ---------------------------

// Sent when a message is updated. The inner payload is a message object.
//
// NOTE! Has _at_least_ the GuildID and ChannelID fields.
//
const EventMessageUpdate = event.MessageUpdate

func (h *MessageUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// MessageUpdateCallback is triggered in MessageUpdate events
type MessageUpdateCallback = func(session Session, h *MessageUpdate)

// ---------------------------

// A user's presence is their current state on a guild. This event is sent when a user's presence is updated for a guild.
//  Fields:
//  - User    *User
//  - Roles   []Snowflake
//  - Game    *Activity
//  - GuildID Snowflake
//  - Status  string
//
const EventPresenceUpdate = event.PresenceUpdate

func (h *PresenceUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// PresenceUpdateCallback is triggered in PresenceUpdate events
type PresenceUpdateCallback = func(session Session, h *PresenceUpdate)

// ---------------------------

// Holds and array of presence update objects
//
const EventPresencesReplace = event.PresencesReplace

func (h *PresencesReplace) registerContext(ctx context.Context) { h.Ctx = ctx }

// PresencesReplaceCallback is triggered in PresencesReplace events
type PresencesReplaceCallback = func(session Session, h *PresencesReplace)

// ---------------------------

// The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions).
// // The ready event can be the largest and most complex event the gateway will send, as it contains all the state
// // required for a client to begin interacting with the rest of the platform.
// //  Fields:
// //  - V int
// //  - User *User
// //  - PrivateChannels []*Channel
// //  - Guilds []*GuildUnavailable
// //  - SessionID string
// //  - Trace []string
//
const EventReady = event.Ready

func (h *Ready) registerContext(ctx context.Context) { h.Ctx = ctx }

// ReadyCallback is triggered in Ready events
type ReadyCallback = func(session Session, h *Ready)

// ---------------------------

// The resumed event is dispatched when a client has sent a resume payload to the gateway
// (for resuming existing sessions).
//  Fields:
//  - Trace []string
//
const EventResumed = event.Resumed

func (h *Resumed) registerContext(ctx context.Context) { h.Ctx = ctx }

// ResumedCallback is triggered in Resumed events
type ResumedCallback = func(session Session, h *Resumed)

// ---------------------------

// Sent when a user starts typing in a channel.
//  Fields:
//  - ChannelID     Snowflake
//  - UserID        Snowflake
//  - TimestampUnix int
//
const EventTypingStart = event.TypingStart

func (h *TypingStart) registerContext(ctx context.Context) { h.Ctx = ctx }

// TypingStartCallback is triggered in TypingStart events
type TypingStartCallback = func(session Session, h *TypingStart)

// ---------------------------

// Sent when properties about the user change. Inner payload is a user object.
//
const EventUserUpdate = event.UserUpdate

func (h *UserUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// UserUpdateCallback is triggered in UserUpdate events
type UserUpdateCallback = func(session Session, h *UserUpdate)

// ---------------------------

// Sent when a guild's voice server is updated. This is sent when initially connecting to voice, and when the current
// voice instance fails over to a new server.
//  Fields:
//  - Token     string
//  - ChannelID Snowflake
//  - Endpoint  string
//
const EventVoiceServerUpdate = event.VoiceServerUpdate

func (h *VoiceServerUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// VoiceServerUpdateCallback is triggered in VoiceServerUpdate events
type VoiceServerUpdateCallback = func(session Session, h *VoiceServerUpdate)

// ---------------------------

// Sent when someone joins/leaves/moves voice channels. Inner payload is a voice state object.
//
const EventVoiceStateUpdate = event.VoiceStateUpdate

func (h *VoiceStateUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// VoiceStateUpdateCallback is triggered in VoiceStateUpdate events
type VoiceStateUpdateCallback = func(session Session, h *VoiceStateUpdate)

// ---------------------------

// Sent when a guild channel's webhook is created, updated, or deleted.
//  Fields:
//  - GuildID   Snowflake
//  - ChannelID Snowflake
//
const EventWebhooksUpdate = event.WebhooksUpdate

func (h *WebhooksUpdate) registerContext(ctx context.Context) { h.Ctx = ctx }

// WebhooksUpdateCallback is triggered in WebhooksUpdate events
type WebhooksUpdateCallback = func(session Session, h *WebhooksUpdate)

// ---------------------------
